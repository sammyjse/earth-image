{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","imageDate","handleChange","bind","handleClick","event","this","setState","target","value","alert","preventDefault","className","class","type","onChange","id","onClick","src","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOAsDeA,G,kBAjDb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,UAAW,IAEb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBANF,E,0EASNE,GACXC,KAAKC,SAAS,CAAEN,UAAWI,EAAMG,OAAOC,U,kCAG9BJ,GACVK,MAAM,iCAAmCJ,KAAKN,MAAMC,WACpDI,EAAMM,mB,+BAIR,OAEI,yBAAKC,UAAU,OACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,mBACf,uBAAGC,MAAM,0BAAT,iDACE,yBAAKD,UAAU,kCACb,2BACEE,KAAK,OACLL,MAASH,KAAKN,MAAMC,UACpBc,SAAYT,KAAKJ,aACjBU,UAAU,yBACVI,GAAG,cACL,yBAAKJ,UAAW,sBAAqB,0BAAMA,UAAU,yBAAwB,uBAAGA,UAAU,qBAE5F,yBAAKA,UAAU,cAAcI,GAAG,WAC9B,4BAAQC,QAASX,KAAKF,YAAaU,KAAK,SAASF,UAAU,mBAA3D,aAGF,yBAAKA,UAAU,cAAcI,GAAG,cAC9B,yBAAKE,IAAI,uFAAuFL,MAAM,0B,GAzClGM,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.cbfe06a8.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      imageDate: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ imageDate: event.target.value });\n  };\n\n  handleClick(event) {\n    alert('A date was submitted for EPI: ' + this.state.imageDate);\n    event.preventDefault();\n  }\n\nrender(){\n  return (\n\n      <div className=\"row\">\n        <div className=\"col-md-6 mx-auto\">\n          <div className=\"form-group mb-4\">\n          <p class=\"text-center text-white\"> Choose a date for Earth Polychromatic Image </p>\n            <div className=\"date input-group p-0 shadow-sm\">\n              <input\n                type=\"date\"\n                value = {this.state.imageDate}\n                onChange = {this.handleChange}\n                className=\"form-control py-4 px-4\"\n                id=\"imageDate\"/>\n              <div className =\"input-group-append\"><span className=\"input-group-text px-4\"><i className=\"fa fa-clock-o\"></i></span></div>\n            </div>\n            <div className=\"text-center\" id=\"findEPI\">\n              <button onClick={this.handleClick} type=\"button\" className=\"btn btn-primary\">Find EPI</button>\n            </div>\n\n            <div className=\"text-center\" id=\"earthImage\">\n              <img src=\"https://epic.gsfc.nasa.gov/archive/natural/2015/10/31/png/epic_1b_20151031074844.png\" class=\"img-thumbnail\"/>\n            </div>\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}